#!/usr/bin/perl -s
use strict;
use warnings;
use vars qw($h $w $s);       # command line switches
use LWP::Protocol::https;    # for SSL (https) support
use LWP::Simple;
use CGI;
use open qw(:std :utf8);     # undeclared streams in UTF-8

$|++; # needed for slowprint() to work

usage() if $h;
my $string = shift;

my $local_file = '/tmp/quotes.txt';
my $url = 'https://raw.githubusercontent.com/jreisinger/blog/master/posts/quotes.txt';

my $quote = do {
    if ($string)    { get_quotes($url) }
    else            { get_rand_quote($url) }
};
print_quote($quote);

#######################################
sub get_quotes {
#######################################
    my $url = shift;

    if (not -e $local_file or -M $local_file > 1) {
        download_quotes($url, $local_file);
    }

    open my $fh, "<", $local_file or die "Can't open $local_file: $!";
    my @quotes = grep /\S+/, <$fh>;
    chomp(@quotes);
    @quotes = grep /$string/i, @quotes;

    return \@quotes;
}

#######################################
sub get_rand_quote {
#######################################
    my $url = shift;

    if (not -e $local_file or -M $local_file > 1) {
        download_quotes($url, $local_file);
    }

    open my $fh, "<", $local_file or die "Can't open $local_file: $!";
    my @quotes = grep /\S+/, <$fh>;
    chomp(@quotes);
    my $quote = $quotes[ rand @quotes ];

    return $quote;
}

#######################################
sub download_quotes {
#######################################
    my ($url, $local_file) = @_;

    my $doc = get $url;
    unless ($doc) {    # get() failed ...
        getprint $url; # ... so print status code and message on STDERR.
        warn "WARN: Problem donwloading $url\n";
    }

    open my $fh, ">", $local_file;
    print $fh $doc;
}

#######################################
sub print_quote {
#######################################
    my $quote = shift;

    if ($w) {       # print in HTML format
        $quote = parens_to_link($quote);

        my $q = CGI->new;
        #<<<
        print
          $q->start_html(-title => "a quote", -encoding => "utf-8"),
          $q->p($quote),
          $q->end_html;
        #>>>
    } elsif ($s) {  # print slowly
         slowprint( $quote . "\n" );
    } else {        # print normally
        if (ref $quote) {   # all quotes containing STRING
            print join("\n\n", @$quote), "\n";
        } else {            # random quote
            print( $quote . "\n" );
        }
    }
}

#######################################
sub parens_to_link {
#######################################
    my $quote = shift;

    # -- TimToady (http://irclog.perlgeek.de/perl6/2013-07-21)
    # ===>
    # -- <a href="http://irclog.perlgeek.de/perl6/2013-07-21">TimToady</a>
    $quote =~
      s#--\s{0,3}([^(]+?)\s+\((http:\/\/[^)]+)\)#-- <a href="$2">$1</a>#;

    return $quote;
}

#######################################
sub slowprint {
#######################################
    my $text = shift;

    for my $char ( split //, $text ) {
        print $char;
        select( undef, undef, undef, 0.005 * $s );
    }
}

#######################################
sub usage {
#######################################
    my $code = (shift) // 0;

    my $msg = <<"EOF";
$0 [-h] [-w|-s] [STRING]
Print a random quote from my collection of quotes. If STRING is supplied
quotes containing the STRING (ignoring the case) are printed.

-w          in HTML format; ignored whe STRING is used
-s[=DELAY]  print characters slowly; ignored when -w or STRING is used

Usage from cron:
PERL5LIB=\$HOME/perl5/MyUtils/lib:\$HOME/perl5/lib/perl5
* * * * *   \$HOME/bin/myquote > \$HOME/public_html/quote.html
EOF

    print $msg;

    exit $code;
}
