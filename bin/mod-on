#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use File::Find;
use Time::Local;
use Getopt::Long;
use Pod::Usage;

#################
# Configuration #
#################

# Command line options
my $help = 0;
my @dirs = (".");
my $man  = 0;
GetOptions(
    "help|?" => \$help,
    "man"    => \$man,
    "dir=s"  => \@dirs,
) or pod2usage(2);

# comma-separated lists of values as well as multiple occurrences of the option
@dirs = split( /,/, join( ',', @dirs ) );

# Help and manual page
pod2usage(1) if $help;
pod2usage( -exitval => 0, -verbose => 2, -noperldoc => 1 ) if $man;

# Command line arguments
pod2usage( -exitval => 1, -verbose => 1 ) unless @ARGV == 1;
my $target_dow = shift;

my %dow = (
    Monday    => 1,
    Tuesday   => 2,
    Wednesday => 3,
    Thursday  => 4,
    Friday    => 5,
    Saturday  => 6,
    Sunday    => 7,
);

my (@days) = grep eval { /^$target_dow/i }, keys %dow;
if ( @days > 1 ) {
    die "$target_dow is ambiguous day of week (@days)\n";
} elsif ( @days == 1 ) {
    $target_dow = $days[0];
} else {
    die "I don't know day of week named $target_dow\n";
}

if ( exists $dow{$target_dow} ) {
    $target_dow = $dow{$target_dow};
} else {
    pod2usage( -exitval => 1, -verbose => 1 );
}

########
# Main #
########

my $seconds_per_day = 24 * 60 * 60;
my ( $sec, $min, $hour, $day, $mon, $yr, $dow ) = localtime;
my $start = timelocal( 0, 0, 0, $day, $mon, $yr );    # midnight today

while ( $dow != $target_dow ) {

    # Back up one day
    $start -= $seconds_per_day;                       # hope no DST today! :-)
    if ( --$dow < 0 ) {
        $dow += 7;
    }
}
my $stop = $start + $seconds_per_day;

my ( $gather, $yield ) = gather_mtime_between( $start, $stop );
find( $gather, @dirs );
my @files = $yield->();

# Print the results
for my $file (@files) {
    my $mtime = ( stat $file )[9];    # mtime via slice
    my $when  = localtime $mtime;
    print "$when: $file\n";
}

# Return two coderefs (closures) for find()
sub gather_mtime_between {
    my ( $start, $stop ) = @_;

    my @files;
    my $gatherer = sub {
        my $mtime = ( stat $_ )[9];
        unless ( defined $mtime ) {
            warn "Can't stat $File::Find::name: $!, skipping\n";
            return;
        }
        push @files, $File::Find::name if $mtime >= $start and $mtime <= $stop;
    };
    my $fetcher = sub { @files };

    ( $gatherer, $fetcher );
}

__END__

=head1 NAME

    mod-on - find files modified on certain day within last week

=head1 SYNOPSIS

    mod-on [options] <day-name>

     Options:
       --help               brief help message
       --man                full documentation
       --dir DIR[,DIR2,...] directory/directories to be searched recursively (default is .)

=head1 DESCRIPTION

    <day-name> is a case insensitive weekday name (Monday, tuesday) 
    that can be shortened to an unambiguous case insensitive value (m, Tu).

    Based on exercise 7.1 from Intermediate Perl book.

=cut
