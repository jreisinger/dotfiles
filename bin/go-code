#!/bin/bash
set -e # exit on error

help_and_exit() {
    cat << EOF
${0##*/} [options]

go-code creates typical Go code directories and files. It is based on
https://golang.org/doc/code.html.

  options:
    -h, -?      help
    -s          create script, i.e. a simple program
EOF

    exit "$1"
}

while getopts "h?s" opt; do
    case "$opt" in
    h|\?)
        help_and_exit 0
        ;;
    s)  script=1
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift


REPO_PREFIX=github.com/jreisinger
MOD="$*"; [[ $MOD == "" ]] && MOD="mymod"
PKG="mypkg"
REPO="$MOD"

echo "--> Create Go code skeleton in '$MOD' folder"

mkdir $REPO
cd $REPO
go mod init $REPO_PREFIX/$MOD

touch main.go

[[ $script ]] && exit 0

mkdir $PKG
touch "$PKG/$PKG.go"
touch "$PKG/${PKG}_test.go"

cat << 'EOF' > Makefile
test:
	go test -race ./...;

build: test
	CGO_ENABLED=0 go build
EOF
cat << EOF >> Makefile

run: build
	./$MOD

install: test
	go install
EOF

cat << EOF > Dockerfile
FROM golang AS build

# Set the current working directory inside container.
WORKDIR /app

# Download all dependencies.
COPY go.* ./
RUN go mod download

# Build the app.
COPY . ./
RUN make build

# Create a single layer image.
FROM alpine:latest
COPY --from=build /app/$MOD /bin/$MOD

ENTRYPOINT ["/bin/$MOD"]
EOF

cat << EOF > README
Module $MOD contains package $PKG.

	make run
	make install
	docker build . -t $MOD
EOF
