#!/bin/bash
set -e # exit on error

# Help.
if [[ $# -ne 0 ]]; then
    cat << EOF
go-code creates typical Go code directories and files.
It is based on https://golang.org/doc/code.html.
EOF
    exit 0
fi

REPO_PREFIX=github.com/jreisinger

MOD="space"
PKG="planet"

## Repository/module

REPO="$MOD"
echo "--> Create repository (folder) '$REPO'"
mkdir $REPO
cd $REPO
echo "--> Create module '$REPO' (repository typically contains only one module)"
go mod init $REPO_PREFIX/$MOD

## Package

mkdir $PKG

echo "--> Create source file of package '$PKG'"
cat << EOF > $PKG/srcfile.go
package $PKG

import (
	"math"
)

type Planet struct {
	Mass   float64
	Radius float64
}

func (p Planet) Density() float64 {
	volume := math.Pi * 4 / 3 * math.Pow(p.Radius, 3)
	return p.Mass / volume
}
EOF

echo "--> Create another source file (test file) of package '$PKG'"
cat << EOF > $PKG/srcfile_test.go
package $PKG

import (
	"testing"
)

func TestDensity(t *testing.T) {
	type testpair struct {
		Planet  Planet
		Density float64
	}
	testpairs := []testpair{
		{Planet{1, 1}, 0.23873241463784298},
	}
	for _, tp := range testpairs {
		d := tp.Planet.Density()
		if d != tp.Density {
			t.Errorf("got %v but expected %v\n", d, tp.Density)
		}
	}
}
EOF

## Main

cat << EOF > main.go
package main

import (
	"fmt"

    "$REPO_PREFIX/$MOD/$PKG"
)

func main() {
	jupiter := $PKG.Planet{
		1.898e27,
		6.9911e7,
	}
	fmt.Printf("The density of Jupiter is %.2f kg/m3.\n", jupiter.Density())
}
EOF

## Makefile

echo "--> Create Makefile"
cat << 'EOF' > Makefile
test:
	if [ ! -z "${SOME_VAR}" ]; then\
		go clean -testcache ./...;\
		go test ./... -tags manual;\
	else\
		go test ./...;\
	fi

build: test
	CGO_ENABLED=0 go build
EOF
cat << EOF >> Makefile

run: build
	./$MOD
EOF

## Dockerfile

echo "--> Create Dockerfile"
cat << EOF > Dockerfile
FROM golang AS build

# Set the current working directory inside container.
WORKDIR /app

# Download all dependencies.
COPY go.* ./
RUN go mod download

# Build the app.
COPY . ./
RUN make build

# Create a single layer image.
FROM alpine:latest
COPY --from=build /app/$MOD /bin/$MOD

ENTRYPOINT ["/bin/$MOD"]
EOF

## Next steps

echo "--> Let's disco"
cat << EOF
cd $MOD
make run
docker build . -t $MOD
EOF
